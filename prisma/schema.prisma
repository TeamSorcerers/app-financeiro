generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum GroupType {
  PERSONAL
  COLLABORATIVE
}

model User {
  id Int @id @default(autoincrement())

  email String @unique @db.VarChar(254)
  name String @db.VarChar(100)
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groups FinancialGroup[]
  groupMembers FinancialGroupMember[]

  transactions Transaction[]
  sentInvitations GroupInvitation[] @relation("SentInvitations")
  receivedInvitations GroupInvitation[] @relation("ReceivedInvitations")
}

model FinancialGroup {
  id Int @id @default(autoincrement())

  name String @db.VarChar(100)
  description String @db.VarChar(150)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy User @relation(fields: [createdById], references: [id])
  createdById Int
  type GroupType @default(COLLABORATIVE)
  members FinancialGroupMember[]
  transactions Transaction[]
  invitations GroupInvitation[]
}

model FinancialGroupMember {
  id Int @id @default(autoincrement())

  user User @relation(fields: [userId], references: [id])
  userId Int

  financialGroup FinancialGroup @relation(fields: [financialGroupId], references: [id])
  financialGroupId Int

  joinedAt DateTime @default(now())

  isOwner Boolean @default(false)

  balance Float @default(0)

  @@unique([userId, financialGroupId])
}

model GroupInvitation {
  id Int @id @default(autoincrement())

  sender User @relation("SentInvitations", fields: [senderId], references: [id])
  senderId Int

  receiver User @relation("ReceivedInvitations", fields: [receiverId], references: [id])
  receiverId Int

  group FinancialGroup @relation(fields: [groupId], references: [id])
  groupId Int

  status InvitationStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FinancialCategory {
  id Int @id @default(autoincrement())

  name String @db.VarChar(100)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]
}

model Transaction {
  id Int @id @default(autoincrement())

  amount Float
  type TransactionType

  description String? @db.VarChar(255)

  date DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  transactionDate DateTime

  createdBy User @relation(fields: [createdById], references: [id])
  createdById Int

  group FinancialGroup @relation(fields: [groupId], references: [id])
  groupId Int

  category FinancialCategory? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}